name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci_job:
    name: Continuous Integration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/previous-releases

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          npm ci
      - name: Build
        run: |
          echo "Building"
          npm run build --if-present
#      - name: Test
#        run: |
#          echo "Testing"
#          npm test
        env:
          CI: true
  cd_job:
    name: Continuous Deployment
    needs: ci_job
    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/' + github.event.repository.default_branch
    if: github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    steps:
      - name: Set up SSH key
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 400 private_key.pem
          sudo apt-get install -y sshpass
#        currently awscli is preinstalled on the runner
#      - name: Install AWS CLI
#        run: sudo apt-get install -y awscli
      - name: Deploy to AWS EC2
        env:
          EC2_INSTANCE_IP_ADDRESS: ${{ secrets.EC2_INSTANCE_IP_ADDRESS }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
          GIT_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@"$EC2_INSTANCE_IP_ADDRESS" "\
          cd /var/www/$REPO_NAME; \
          echo '### Backing up environment file...'; \
          if [ -e .env ]; then \
            echo '### Environment file exists, backing up...'; \
            cp -f .env .env.backup; \
          else \
            echo '### No environment file found...'; \
            echo '### Creating .env file...'; \
            touch .env; \
          fi; \
          echo \"$ENV_FILE\" > .env; \
          echo 'Environment file updated successfully'; \
          echo '### Setting correct permissions...'; \
          sudo chown -R ec2-user:ec2-user /var/www/$REPO_NAME; \
          sudo find /var/www/$REPO_NAME -type d -exec chmod 755 {}; \
          sudo find /var/www/$REPO_NAME -type f -exec chmod 644 {}; \
           if [ -d /var/www/$REPO_NAME/certbot ]; then \
            echo '### Setting certbot permissions...'; \
            sudo chmod -R 755 /var/www/$REPO_NAME/certbot; \
          fi; \
          if [ ! -d /var/www/$REPO_NAME/.git ]; then \
            echo '### Cloning the repository to /var/www...'; \
            cd /var/www; \
            git clone https://x-access-token:$GIT_TOKEN@github.com/hsm2k3/$REPO_NAME; \
            echo '### Cloned the repository.'; \
            echo '### Creating ssl-dhparams.pem...'; \
            openssl dhparam -out /var/www/$REPO_NAME/ssl-dhparams.pem 2048; \
            if [ -e /var/www/$REPO_NAME/ssl-dhparams.pem ]; then \
              echo '### Created ssl-dhparams.pem...'; \
            fi; \
          else \
            echo '### Refreshing repository code...'; \
            cd /var/www/$REPO_NAME; \
            echo '### Try git pull first, which is safer...'; \
            if git pull origin main; then \
              echo '### Repository updated successfully with git pull'; \
            else \
              echo '### Git pull failed, trying hard reset...'; \
              echo '### Backing up environment file...'; \
              echo '### Force fetch and reset as fallback...'; \
              git fetch origin; \
              git reset --hard origin/main; \
            fi; \
            chmod +x /var/www/$REPO_NAME/deployment/update_server.sh; \
            echo '### Updating server...'; \
            ./deployment/update_server.sh; \
          fi; \
          echo '### Taking down current images...'; \
          cd /var/www/$REPO_NAME && sudo docker-compose down; \
          # Add Docker group permissions for the current user if needed
          if ! groups ec2-user | grep -q docker; then \
            echo '### Adding ec2-user to the docker group...'; \
            sudo usermod -aG docker ec2-user; \
            # This won't take effect until next login, so use sudo for now 
          fi; \
          echo '### Setting build variables...'; \
          export BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ'); \
          export GIT_COMMIT=\$(git rev-parse HEAD); \
          echo '### Rebuilding containers with fresh code...'; \
          # Use sudo if not in docker group yet
          sudo -E docker-compose up -d --force-recreate --no-deps --build;
          echo '### Waiting for containers to be healthy...'; \
          sleep 30; \
          if docker ps | grep -q 'nextjs' && docker ps | grep -q 'nginx'; then \
            echo '### Containers are running, cleaning up unused volumes...'; \
            docker system prune -af --volumes; \
            echo '### Volume cleanup complete'; \
          else \
            echo '### Container startup check failed, skipping volume cleanup'; \
          fi"
      - name: Deploy to Kubernetes
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
          DEPLOY_DATE: $(date)
        run: |
          # Update kubernetes manifests with the new image and version info
          sed -i "s|\${ECR_REGISTRY}|$ECR_REGISTRY|g" kubernetes/deployment.yaml
          sed -i "s|\${ECR_REPOSITORY}|$ECR_REPOSITORY|g" kubernetes/deployment.yaml
          sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" kubernetes/deployment.yaml

          # Apply kubernetes manifests
          kubectl apply -f kubernetes/configmap.yaml
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml

          # Wait for deployment to complete
          kubectl rollout status deployment/nextjs-app

          # Record deployment information
          echo "Deployed version $IMAGE_TAG at $(date)" >> deployment_history.txt

          # Check deployment status and output info
          kubectl get deployments
          kubectl get pods -l app=nextjs-app

          # Store the logs from the deployment
          mkdir -p deployment_logs
          for pod in $(kubectl get pods -l app=nextjs-app -o=name); do
            kubectl logs $pod > deployment_logs/$(echo $pod | cut -d '/' -f 2).log
          done